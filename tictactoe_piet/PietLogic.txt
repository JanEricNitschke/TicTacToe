Default Stack: [P,0,1,2,3,4,5,6,7,8]

SetNth [N,P,0,1,2,3,4,5,6,7,8]: (N = 0 based indexing)
PUSH 2 -> [2,N,X,0,1,2,3,4,5,6,7,8]
ADD    -> [N+2,X,0,1,2,3,4,5,6,7,8]
DUP    -> [N+2,N+2,X,0,1,2,3,4,5,6,7,8]
PUSH 12-> [12,N+2,N+2,X,0,1,2,3,4,5,6,7,8]
PUSH 1 -> [1,12,N+2,N+2,X,0,1,2,3,4,5,6,7,8]
ROLL   -> [N+2,X,0,1,2,3,4,5,6,7,8,N+2]
DUP    -> [N+2,N+2,X,0,1,2,3,4,5,6,7,8,N+2]
PUSH 1 -> [1,N+2,N+2,X,0,1,2,3,4,5,6,7,8,N+2]
SUB    -> [N+1,N+2,X,0,1,2,3,4,5,6,7,8,N+2]
ROLL   -> [3,X,0,1,2,4,5,6,7,8,N+2] (with example N=3)
POP    -> [X,0,1,2,4,5,6,7,8,N+2]
DUP    -> [X,X,0,1,2,4,5,6,7,8,N+2]
PUSH 11-> [11,X,X,0,1,2,4,5,6,7,8,N+2]
PUSH 10-> [10,11,X,X,0,1,2,4,5,6,7,8,N+2]
ROLL   -> [N+2,X,X,0,1,2,4,5,6,7,8]
PUSH 1 -> [1,N+2,X,X,0,1,2,4,5,6,7,8]
ROLL   -> [X,0,1,2,X,4,5,6,7,8] (original Stack with board change)


GetNth [N,P,0,1,2,3,4,5,6,7,8]: (N = 0 based indexing)
PUSH 2 -> [2,N,P,0,1,2,3,4,5,6,7,8]
ADD    -> [N+2,P,0,1,2,3,4,5,6,7,8]
DUP    -> [N+2,N+2,P,0,1,2,3,4,5,6,7,8]
PUSH 12-> [12,N+2,N+2,P,0,1,2,3,4,5,6,7,8]
PUSH 1 -> [1,12,N+2,N+2,P,0,1,2,3,4,5,6,7,8]
ROLL   -> [N+2,P,0,1,2,3,4,5,6,7,8,N+2]
DUP    -> [N+2,N+2,P,0,1,2,3,4,5,6,7,8,N+2]
PUSH 1 -> [1,N+2,N+2,P,0,1,2,3,4,5,6,7,8,N+2]
SUB    -> [N+1,N+2,P,0,1,2,3,4,5,6,7,8,N+2]
ROLL   -> [3,P,0,1,2,4,5,6,7,8,N+2] (with example N=3)
DUP    -> [3,3,P,0,1,2,4,5,6,7,8,N+2]
PUSH 13-> [13,3,3,P,0,1,2,4,5,6,7,8,N+2]
PUSH 1 -> [1,13,3,3,P,0,1,2,4,5,6,7,8,N+2]
ROLL   -> [3,P,0,1,2,4,5,6,7,8,N+2,3]
PUSH 11-> [11,3,P,0,1,2,4,5,6,7,8,N+2,3]
PUSH 10-> [10,11,3,P,0,1,2,4,5,6,7,8,N+2,3]
ROLL   -> [N+2,3,P,0,1,2,4,5,6,7,8,3]
PUSH 1 -> [1,N+2,3,P,0,1,2,4,5,6,7,8,3]
ROLL   -> [P,0,1,2,3,4,5,6,7,8,3]
PUSH 11-> [11,P,0,1,2,3,4,5,6,7,8,3]
PUSH 10-> [10,11,P,0,1,2,3,4,5,6,7,8,3]
ROLL   -> [3,P,0,1,2,3,4,5,6,7,8] (Nth value + original Stack)

PrintBoard [P,0,1,2,3,4,5,6,7,8]:
PUSH 10  -> [10,P,0,1,2,3,4,5,6,7,8]
PUSH 1   -> [1,10,P,0,1,2,3,4,5,6,7,8]
ROLL     -> [0,1,2,3,4,5,6,7,8,P]
DUP      -> [0,0,1,2,3,4,5,6,7,8,P]
OUT_CHAR -> [0,1,2,3,4,5,6,7,8,P]        "0"
PUSH 10  -> [10,0,1,2,3,4,5,6,7,8,P]
PUSH 1   -> [1,10,0,1,2,3,4,5,6,7,8,P]
ROLL     -> [1,2,3,4,5,6,7,8,P,0]
DUP      -> [1,1,2,3,4,5,6,7,8,P,0]
OUT_CHAR -> [1,2,3,4,5,6,7,8,P,0]        "01"
PUSH 10  -> [10,P,1,2,3,4,5,6,7,8,P,0]
PUSH 1   -> [1,10P,1,2,3,4,5,6,7,8,P,0]
ROLL     -> [2,3,4,5,6,7,8,P,0,1]
DUP      -> [2,2,3,4,5,6,7,8,P,0,1]
OUT_CHAR -> [2,3,4,5,6,7,8,P,0,1]       "012"
PUSH 10  -> [10,2,3,4,5,6,7,8,P,0,1]
OUT_CHAR -> [2,3,4,5,6,7,8,P,0,1]       "012\n"
PUSH 10
PUSH 1
ROLL
DUP
OUT_CHAR -> [3,4,5,6,7,8,P,0,1,2]       "012\n3"
PUSH 10
PUSH 1
ROLL
DUP
OUT_CHAR -> [4,5,6,7,8,P,0,1,2,3]       "012\n34"
PUSH 10
PUSH 1
ROLL
DUP
OUT_CHAR -> [5,6,7,8,P,0,1,2,3,4]       "012\n345"
PUSH 10  ->
OUT_CHAR ->                             "012\n345\n"
PUSH 10
PUSH 1
ROLL
DUP
OUT_CHAR -> [6,7,8,P,0,1,2,3,4,5]       "012\n345\n6"
PUSH 10
PUSH 1
ROLL
DUP
OUT_CHAR -> [7,8,P,0,1,2,3,4,5,6]       "012\n345\n67"
PUSH 10
PUSH 1
ROLL
DUP
OUT_CHAR -> [8,P,0,1,2,3,4,5,6,7]       "012\n345\n678"
PUSH 10  ->
OUT_CHAR ->                             "012\n345\n678\n"
PUSH 10
PUSH 1
ROLL     -> [P,0,1,2,3,4,5,6,7,8] (original stack)

ConditionCheck [X,Y,Z,P,0,1,2,3,4,5,6,7,8]:
...
    -> [R,P,0,1,2,3,4,5,6,7,8] (R = 0 or 1)

CheckWinner [P,0,1,2,3,4,5,6,7,8]:
...
   -> [R,P,0,1,2,3,4,5,6,7,8] (R = 0 or 1)

CheckDraw [P,0,1,2,3,4,5,6,7,8]:
...
   -> [R,P,0,1,2,3,4,5,6,7,8] (R = 0 or 1)

PrintInput [P,0,1,2,3,4,5,6,7,8]:
...
   -> [P,0,1,2,3,4,5,6,7,8] (original board)

PrintDraw [P,0,1,2,3,4,5,6,7,8]:
...
   -> [P,0,1,2,3,4,5,6,7,8] (original board)

PrintWin  [P,0,1,2,3,4,5,6,7,8]:
...
   -> [P,0,1,2,3,4,5,6,7,8] (original board)

SwapPlayer  [P1,0,1,2,3,4,5,6,7,8]:
...
   -> [P2,0,1,2,3,4,5,6,7,8] (P1, P2 e (88,79) && P1 != P2)
