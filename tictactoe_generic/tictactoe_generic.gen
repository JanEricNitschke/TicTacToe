#!/usr/bin/env generic

class ConditionResult {
    __init__() {
        this.spots_done = 0;
        this.spots_open = [];
    }
}

class Move {
    __init__(spot, end_state) {
        this.spot = spot;
        this.end_state = end_state;
    }
}

class TicTacToe {
    __init__() {
        this.board = ["0", "1", "2", "3", "4", "5", "6", "7", "8"];
        this.win_conditions = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8], # Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8], # Cols
            [0, 4, 8], [2, 4, 6] # Diagonals
        ];
        this.player_markers = ["X", "O"];
        this.ai_opponent = false;
        this.ai_marker = "X";
        this.ai_strength = 1;
    }

    swap_player(player) {
        if player == "X" {
            return "O";
        }
        return "X";
    }

    show_board() {
        const line_separator = "---------------";
        print(line_separator);
        const side_length = 3;
        for (var row = 0; row < side_length; row += 1) {
            for (var col = 0; col < side_length; col += 1) {
                print("| " + str(this.board[(row * side_length) + col] + " |"), "");
            }
            print("");
            print(line_separator);
        }
    }

    check_win_condition(player, win_condition) {
        var result = ConditionResult();
        for (var i = 0; i < len(win_condition); i += 1) {
            const spot = win_condition[i];
            if this.board[spot] == player {
                result.spots_done += 1;
            }
            unless this.player_markers.contains(this.board[spot]) {
                result.spots_open.append(spot);
            }
        }
        return result;
    }

    is_player_win(player) {
        for (var i = 0; i < len(this.win_conditions); i += 1) {
            const result = this.check_win_condition(player, this.win_conditions[i]);
            if result.spots_done == 3 {
                return true;
            }
        }
        return false;
    }

    board_filled() {
        for (var spot = 0; spot < len(this.board); spot += 1) {
            unless this.player_markers.contains(this.board[spot]) {
                return false;
            }
        }
        return true;
    }

    fix_spot(spot, player) {
        if spot < 0 or spot > 8 {
            print("ERROR: Spot has to be in range [0-8]!");
            return false;
        }
        if this.player_markers.contains(this.board[spot]) {
            print("ERROR: Spot " + str(spot) + " is already occupied!");
            return false;
        }
        this.board[spot] = player;
        return true;
    }

    player_turn(player) {
        print("Player " + player + " turn.");
        this.show_board();

        var valid_input = false;
        until valid_input {
            const user_input = input("Where to make your next move? [0-8]");
            unless is_int(user_input) {
                print("ERROR: Input must be a valid integer!");
                continue;
            }
            if this.fix_spot(int(user_input), player) {
                valid_input = true;
            }
        }
    }

    get_empty_cells() {
        var empty_cells = [];
        for (var spot = 0; spot < len(this.board); spot += 1) {
            unless this.player_markers.contains(this.board[spot]) {
                empty_cells.append(spot);
            }
        }
        return empty_cells;
    }

    random_move() {
        const empty_cells = this.get_empty_cells();

        const chosen_index = rng(0, len(empty_cells));

        return Move(empty_cells[chosen_index], 0);
    }

    get_winning_move(player) {
        for (var i = 0; i < len(this.win_conditions); i += 1) {
            const condition = this.win_conditions[i];
            const result = this.check_win_condition(player, condition);
            if (result.spots_done == 2 and len(result.spots_open) == 1) {
                return Move(result.spots_open[0], 1);
            }
        }
        return nil;
    }

    win_move(player) {
        const winning_move = this.get_winning_move(player);
        if winning_move == nil {
            return this.random_move();
        }
        return winning_move;
    }

    block_win_move(player) {
        const winning_move = this.get_winning_move(player);
        unless winning_move == nil {
            return winning_move;
        }
        const blocking_move = this.get_winning_move(this.swap_player(player));
        unless blocking_move == nil {
            return blocking_move;
        }
        return this.random_move();
    }

    minmax(player) {
        # Game already won
        if this.is_player_win(player) {
            return Move(-1, 1);
        }

        # Game already lost
        if this.is_player_win(this.swap_player(player)) {
            return Move(-1, -1);
        }

        const empty_cells = this.get_empty_cells();
        # Game already drawn
        if len(empty_cells) == 0 {
            return Move(-1, 0);
        }

        # New game, just do random move
        if len(empty_cells) == 9 {
            return this.random_move();
        }

        var best_move = Move(-1, -1);
        for (var i = 0; i < len(empty_cells); i += 1) {
            const current_spot = empty_cells[i];
            this.board[current_spot] = player;
            const current_move = this.minmax(this.swap_player(player));
            if -current_move.end_state >= best_move.end_state {
                best_move = Move(current_spot, -current_move.end_state);
            }
            this.board[current_spot] = str(current_spot);
        }
        return best_move;
    }

    ai_turn(player) {
        print("AI turn as " + player + ".");
        this.show_board();
        var ai_move;
        switch this.ai_strength {
            case 1:
                ai_move = this.random_move();
            case 2:
                ai_move = this.win_move(player);
            case 3:
                ai_move = this.block_win_move(player);
            default:  # 4
                ai_move = this.minmax(player);
        }
        this.board[ai_move.spot] = player;
        sleep(1);
    }

    get_yes_no(question) {
        var response;
        const valid_answers = ["Y", "y", "N", "n"];
        until valid_answers.contains(response) {
            response = input(question);
        }
        return ["Y", "y"].contains(response);
    }

    get_ai_opponent() {
        this.ai_opponent = this.get_yes_no("Play alone vs AI? [y/n]");
    }

    get_ai_start() {
        if this.get_yes_no("Should the AI make the first move? [y/n]") {
            this.ai_marker = "X";
        } else {
            this.ai_marker = "O";
        }
    }

    get_ai_strength() {
        var strength;
        print("AI strength settings:");
        print("1: Easy");
        print("2: Medium");
        print("3: Hard");
        print("4: Impossible");
        until [1, 2, 3, 4].contains(strength) {
            const response = input("How strong should the AI be? [1 - 4]");
            unless is_int(response) {
                print("Bad choice");
            }
            strength = int(response);
        }
        this.ai_strength = strength;
    }

    initialize_game() {
        this.get_ai_opponent();
        if this.ai_opponent {
            this.get_ai_start();
            this.get_ai_strength();
        }
    }

    play() {
        var player = "X";

        while true {
            if this.ai_opponent and player == this.ai_marker {
                this.ai_turn(player);
            } else {
                this.player_turn(player);
            }

            if this.is_player_win(player) {
                print("Player " + player + " wins the game!");
                break;
            }

            if this.board_filled() {
                print("Match Draw!");
                break;
            }

            player = this.swap_player(player);
        }

        this.show_board();
    }

}

if __name__ == "<script>" {
    const tictactoe = TicTacToe();
    tictactoe.initialize_game();
    tictactoe.play();
}
