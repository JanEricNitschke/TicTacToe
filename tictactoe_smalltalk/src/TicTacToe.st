Object subclass: #Game	instanceVariableNames: 'board'	classVariableNames: ''	poolDictionaries: ''	category: 'TicTacToe'!!Game methodsFor: 'helper' stamp: 'JEN 2/3/2024 18:13'!spotOccupied: occupant	^occupant ='X' or: occupant = 'O'! !!Game methodsFor: 'helper' stamp: 'JEN 2/3/2024 18:14'!swapPlayer: player	player = 'X'		ifTrue: [^'O'].	^'X'! !!Game methodsFor: 'printing' stamp: 'JEN 2/3/2024 18:23'!showBoard	Transcript show: (' {1} | {2} | {3} ' format: {(self board at: 1). (self board at: 2). (self board at: 3).});cr.	Transcript show: (' {1} | {2} | {3} ' format: {(self board at: 4). (self board at: 5). (self board at: 6).});cr.	Transcript show: (' {1} | {2} | {3} ' format: {(self board at: 7). (self board at: 8). (self board at: 9).});cr.! !!Game methodsFor: 'gameOver' stamp: 'JEN 2/3/2024 17:55'!boardFilled	"Checks if the board is filled. If done after gameWon this indicates a draw."	self board do: [:occupant |		(self spotOccupied: occupant)		ifFalse: [^false]	].	^true.! !!Game methodsFor: 'gameOver' stamp: 'JEN 2/3/2024 18:00'!gameWon: player	| winPatterns |	winPatterns := #(		#(1 2 3) #(4 5 6) #(7 8 9)		#(1 4 7) #(2 5 8) #(3 6 9)		#(1 5 9) #(3 5 7)	).	winPatterns do: [:pattern |		((self board at: (pattern at: 1)) = player and:		(self board at: (pattern at: 2)) = player and:		(self board at: (pattern at: 3)) = player)			ifTrue: [^true]		].	^false! !!Game methodsFor: 'move' stamp: 'JEN 2/3/2024 18:24'!getInput: player	| spot |	[true] whileTrue: [		Transcript show: ('Player {1} turn:' format: player);crlf.		self showBoard.		spot := FillInTheBlank request: 'Where to make your next move? [1-9]'.		(spot matchesRegex: '[1-9]')			ifTrue: [				spot := spot asInteger.				(self spotOccupied: (self board at: spot))					ifTrue: [	Transcript show: 'Spot occupied!!';cr]					ifFalse: [^spot]			] 			ifFalse: [Transcript show: 'Invalid input';cr]	]! !!Game methodsFor: 'move' stamp: 'JEN 2/3/2024 18:12'!playerMove: player	| spot |	spot := self getInput: player.	self board at: spot put: player.! !!Game methodsFor: 'play' stamp: 'JEN 2/3/2024 18:14'!playGame	| player gameOver |	player := 'X'.	gameOver := false.	[ gameOver] whileFalse: [		self playerMove: player.		(self gameWon: player)			ifTrue: [				gameOver := true.				Transcript show: ('Player {1} wins the game!!' format: player);cr.				].		self boardFilled			ifTrue: [				gameOver := true.				Transcript show: 'Match Drawn!!';cr.				].		player := self swapPlayer: player.	].	self showBoard.! !!Game methodsFor: 'accessing' stamp: 'JEN 2/3/2024 17:53'!board	^ board! !!Game methodsFor: 'initialize-release' stamp: 'JEN 2/3/2024 17:53'!initialize	super initialize.	board := #('1' '2' '3' '4' '5' '6' '7' '8' '9') copy.! !
