from random import seed, random_ui64
from time import sleep
import sys

alias OPEN: UInt8 = 0  # (00)
alias X: UInt8 = 1  # (01)
alias O: UInt8 = 2  # (10)
alias BOARD = SIMD[DType.uint8, _]


@value
struct Move:
    var spot: Int
    var score: Int


@always_inline("nodebug")
fn _board_construction_checks[size: Int]():
    """Checks if the board size is valid.

    The board size is valid if it is a power of two and is positive.

    Parameters:
        size: The number of elements in the board.
    """
    constrained[size > 0, "board size must be > 0"]()
    constrained[size & (size - 1) == 0, "board size must be power of 2"]()


fn _swap_player(player: UInt8) -> UInt8:
    """Returns the other player.

    Args:
        player: The player to swap.

    Returns:
        The other player.
    """
    return 3 - player


fn _minmax[player: UInt8, size: Int](mut board: BOARD[size * size]) -> Move:
    """Returns the best move for the player.

    Args:
        board: The current board.

    Parameters:
        player: The player to get the best move for.

    Returns:
        The best move for the player.
    """
    if _is_winner_param[player](board):
        return Move(-1, 1)

    @parameter
    if player == X:
        if _is_winner_param[O](board):
            return Move(-1, -1)
    else:
        if _is_winner_param[X](board):
            return Move(-1, -1)
    var empty_cells = _get_empty_cells(board)
    if len(empty_cells) == 0:
        return Move(-1, 0)
    var best_move = Move(-1, -2)
    var score: Int
    for spot in empty_cells:
        board[spot[]] = player
        if player == X:
            score = -(_minmax[O](board).score)
        else:
            score = -(_minmax[X](board).score)
        board[spot[]] = OPEN
        if score > best_move.score:
            best_move.score = score
            best_move.spot = spot[]
        if score == 1:
            break
    return best_move


fn _get_empty_cells[size: Int](board: BOARD[size * size]) -> List[Int]:
    """Returns the empty cells in the board.

    Args:
        board: The board to check.

    Returns:
        The empty cells in the board.
    """
    var empty_cells = List[Int]()

    @parameter
    for i in range(board.size):
        if board[i] == OPEN:
            empty_cells.append(i)
    return empty_cells


fn _ai_turn[
    size: Int, //, player: UInt8
](mut board: BOARD[size * size], strength: UInt8) -> Int:
    """Returns the move that the X player made.

    Args:
        board: The current board.
        strength: The strength of the X player.

    Returns:
        The move the X player made as an index into the board.
    """
    print(
        "AI turn as ",
        _int_to_player(player),
        " with strength ",
        strength,
        ".",
        sep="",
    )
    _show_board(board)
    var empty_cells = _get_empty_cells(board)
    var spot: Int
    if len(empty_cells) >= 12:
        spot = empty_cells[Int(random_ui64(0, len(empty_cells) - 1))]
    else:
        spot = _minmax[player](board).spot
    sleep(UInt(1))
    return spot


fn _player_turn[size: Int](board: BOARD[size * size], player: UInt8) raises -> Int:
    """Returns the move that the player made.

    Args:
        board: The current board.
        player: The player that should make the move.

    Returns:
        The move the player made as an index into the board.
    """
    var player_input: String
    var move: Int
    while True:
        print(
            "Player ",
            _int_to_player(player),
            " enter your move (0-",
            (board.size) - 1,
            ").",
            sep="",
        )
        _show_board(board)
        player_input = input()
        try:
            move = Int(player_input)
            if move >= 0 and move < board.size and board[move] == OPEN:
                break
            print("Enter a valid number and try again.")
        except ValueError:
            print("Enter a number and try again.")
            continue

    return move


fn _int_to_player(player: UInt8) -> String:
    """Returns the player as a string.

    Args:
        player: The player to convert.

    Returns:
        The player as a string.
    """
    if player == X:
        return "X"
    elif player == O:
        return "O"
    else:
        return "-"


fn _show_board[size: Int](board: BOARD[size * size]):
    """Prints the board to the console.

    Args:
        board: The board to print.
    """
    var SEP: String = "-"
    var SEPARATOR: String = SEP * (5 * size)
    print(SEPARATOR)
    for i in range(size):
        for j in range(size):
            print("| ", _int_to_player(board[i * size + j]), " |", end="", sep="")
        print()
        print(SEPARATOR)


fn _is_full[size: Int](board: BOARD[size * size]) -> Bool:
    """Returns True if the board is full.

    Args:
        board: The board to check.

    Returns:
        True if the board is full, False otherwise.
    """
    return all(board != OPEN)


fn _is_winner_param[size: Int, //, player: UInt8](board: BOARD[size * size]) -> Bool:
    var reference: SIMD[DType.uint8, board.size]

    @parameter
    for row in range(size):
        reference = SIMD[DType.uint8, board.size](0)

        @parameter
        for col in range(size):
            reference[row * size + col] = player
        if (board & reference).reduce_bit_count() == size:
            return True

    # Check columns
    @parameter
    for col in range(size):
        reference = SIMD[DType.uint8, board.size](0)

        @parameter
        for row in range(size):
            reference[row * size + col] = player
        if (board & reference).reduce_bit_count() == size:
            return True

    # Check main diagonal
    reference = SIMD[DType.uint8, board.size](0)

    @parameter
    for i in range(size):
        reference[i * size + i] = player
    if (board & reference).reduce_bit_count() == size:
        return True

    # Check anti-diagonal
    reference = SIMD[DType.uint8, board.size](0)

    @parameter
    for i in range(size):
        reference[i * size + (size - 1 - i)] = player
    if (board & reference).reduce_bit_count() == size:
        return True
    return False


fn _is_winner[size: Int](board: BOARD[size * size], player: UInt8) -> Bool:
    """Returns True if the player is the winner.

    Args:
        board: The board to check.
        player: The player to check.

    Returns:
        True if the player is the winner, False otherwise.
    """
    if player == X:
        return _is_winner_param[X](board)
    return _is_winner_param[O](board)


fn _play[
    size: Int
](
    mut board: BOARD[size * size],
    player: UInt8,
    x_strength: UInt8,
    o_strength: UInt8,
) raises:
    """Returns the move that the player made.

    Args:
        board: The current board.
        player: The player that should make the move.
        x_strength: The strength of the X player. (0 means human)
        o_strength: The strength of the O player. (0 means human)

    Returns:
        The move the player made as an index into the board.
    """
    var move: Int
    if player == X and x_strength > 0:
        move = _ai_turn[X](board, x_strength)
    elif player == O and o_strength > 0:
        move = _ai_turn[O](board, o_strength)
    else:
        move = _player_turn(board, player)
    board[move] = player


fn play[size: Int](x_strength: UInt8, o_strength: UInt8) raises:
    seed()
    _board_construction_checks[size]()
    var board = BOARD[size * size](0)
    var player: UInt8 = 1

    while True:
        _play(board, player, x_strength, o_strength)
        if _is_winner(board, player):
            print("Player ", _int_to_player(player), " wins!", sep="")
            break
        if _is_full(board):
            print("It's a draw!")
            break
        player = _swap_player(player)

    _show_board(board)
